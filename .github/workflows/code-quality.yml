name: Code Quality Checks

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run code quality checks daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  lint:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Ruff linting
        run: |
          ruff check src/ tests/ --output-format=github --fix
          # Check if there are any fixes needed
          if [ $? -ne 0 ]; then
            echo "❌ Ruff found issues that need to be fixed"
            ruff check src/ tests/ --output-format=github
            exit 1
          fi

      - name: Run Black formatting
        run: |
          black --check --diff src/ tests/
          if [ $? -ne 0 ]; then
            echo "❌ Code is not properly formatted with Black"
            echo "Run 'black src/ tests/' to fix formatting"
            exit 1
          fi

      - name: Run isort import sorting
        run: |
          isort --check-only --diff src/ tests/
          if [ $? -ne 0 ]; then
            echo "❌ Imports are not properly sorted"
            echo "Run 'isort src/ tests/' to fix import sorting"
            exit 1
          fi

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run MyPy type checking
        run: |
          mypy src/ --config-file packages/mypy.ini --show-error-codes
          if [ $? -ne 0 ]; then
            echo "❌ MyPy found type errors"
            exit 1
          fi

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files --show-diff-on-failure
          if [ $? -ne 0 ]; then
            echo "❌ Pre-commit hooks failed"
            echo "Run 'pre-commit run --all-files' locally to fix issues"
            exit 1
          fi

  code-quality-summary:
    name: Code Quality Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, pre-commit]
    if: always()
    steps:
      - name: Generate code quality summary
        run: |
          echo "# 🧹 Code Quality Summary" > code-quality-summary.md
          echo "" >> code-quality-summary.md
          echo "## Check Results" >> code-quality-summary.md
          echo "" >> code-quality-summary.md

          # Linting status
          if [ "${{ needs.lint.result }}" == "success" ]; then
            echo "- ✅ Linting and formatting: PASSED" >> code-quality-summary.md
          elif [ "${{ needs.lint.result }}" == "skipped" ]; then
            echo "- ⏭️  Linting and formatting: SKIPPED" >> code-quality-summary.md
          else
            echo "- ❌ Linting and formatting: FAILED" >> code-quality-summary.md
          fi

          # Type checking status
          if [ "${{ needs.type-check.result }}" == "success" ]; then
            echo "- ✅ Type checking: PASSED" >> code-quality-summary.md
          else
            echo "- ❌ Type checking: FAILED" >> code-quality-summary.md
          fi

          # Pre-commit status
          if [ "${{ needs.pre-commit.result }}" == "success" ]; then
            echo "- ✅ Pre-commit hooks: PASSED" >> code-quality-summary.md
          elif [ "${{ needs.pre-commit.result }}" == "skipped" ]; then
            echo "- ⏭️  Pre-commit hooks: SKIPPED (not a PR)" >> code-quality-summary.md
          else
            echo "- ❌ Pre-commit hooks: FAILED" >> code-quality-summary.md
          fi

          echo "" >> code-quality-summary.md
          echo "## Recommendations" >> code-quality-summary.md
          echo "" >> code-quality-summary.md
          echo "1. Ensure all code follows the established style guidelines" >> code-quality-summary.md
          echo "2. Fix any type errors identified by MyPy" >> code-quality-summary.md
          echo "3. Run pre-commit hooks locally before pushing" >> code-quality-summary.md
          echo "4. Use the provided formatters (Black, isort) for consistent code style" >> code-quality-summary.md

          cat code-quality-summary.md

      - name: Upload code quality summary
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-summary
          path: code-quality-summary.md
          retention-days: 30

      - name: Comment summary on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            if (fs.existsSync('code-quality-summary.md')) {
              const summary = fs.readFileSync('code-quality-summary.md', 'utf8');

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }